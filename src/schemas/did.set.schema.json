{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://github.com/metameta-protocol/metametasets-schema/src/did.set.schema.json",
  "title": "Meta Set",
  "description": "Schema for sets of sets and contextual rules",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "id",
    "name",
    "timestamp",
    "version",
    "entities",
    "rules",
    "conditions"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "Identifier for the set",
      "minLength": 1,
      "maxLength": 32,
      "pattern": "^[\\w ]+$",
      "examples": [
        "set.smartcontract.uniswapAndPoolTogether.v0.1.0"
      ]
    },
    "name": {
      "type": "string",
      "description": "The name of the DID set",
      "minLength": 1,
      "maxLength": 20,
      "pattern": "^[\\w ]+$",
      "examples": [
        "Introduction to Decentralized Finance via Uniswap and PoolTogether"
      ]
    },
    "object": {
      "type": "string",
      "description": "The object type",
      "minLength": 1,
      "maxLength": 20,
      "pattern": "^[\\w ]+$"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "The timestamp of this list version; i.e. when this immutable version of the set was created"
    },
    "version": {
      "$ref": "#/definitions/Version"
    },
    "entities": {
      "type": "array",
      "description": "The list of smart contracts included in the set",
      "items": {
        "$ref": "#/definitions/SmartContractSetEntity"
      },
      "minItems": 1,
      "maxItems": 10000
    },
    "rules": {
      "type": "array",
      "description": "Rules that apply to the entities.",
      "items": {
        "$ref": "#/definitions/SmartContractSetRule"
      },
      "minItems": 1,
      "maxItems": 10000
    },
    "conditions": {
      "type": "array",
      "description": "Conditions that apply to the rules.",
      "items": {
        "$ref": "#/definitions/SmartContractSetCondition"
      },
      "minItems": 1,
      "maxItems": 10000
    },
    "keywords": {
      "type": "array",
      "description": "Keywords associated with the contents of the list; may be used in list discoverability",
      "items": {
        "type": "string",
        "description": "A keyword to describe the contents of the list",
        "minLength": 1,
        "maxLength": 20,
        "pattern": "^[\\w ]+$",
        "examples": [
          "compound",
          "lending",
          "personal tokens"
        ]
      },
      "maxItems": 20,
      "uniqueItems": true
    },
    "tags": {
      "type": "object",
      "description": "A mapping of tag identifiers to their name and description",
      "propertyNames": {
        "$ref": "#/definitions/TagIdentifier"
      },
      "additionalProperties": {
        "$ref": "#/definitions/TagDefinition"
      },
      "maxProperties": 20,
      "examples": [
        {
          "stablecoin": {
            "name": "Stablecoin",
            "description": "A token with value pegged to another asset"
          }
        }
      ]
    },
    "logoURI": {
      "type": "string",
      "description": "A URI for the logo of the token list; prefer SVG or PNG of size 256x256",
      "format": "uri",
      "examples": [
        "ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM"
      ]
    },
    "contentURI": {
      "type": "string",
      "description": "A URI for the logo of the token list; prefer SVG or PNG of size 256x256",
      "format": "uri",
      "examples": [
        "ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM"
      ]
    }
  },
  "definitions": {
    "Version": {
      "type": "object",
      "description": "The version of the set, used in change detection",
      "examples": [
        {
          "major": 1,
          "minor": 0,
          "patch": 0
        }
      ],
      "additionalProperties": false,
      "properties": {
        "major": {
          "type": "integer",
          "description": "The major version of the list. Must be incremented when smart contract are removed from the list or smart contract addresses are changed.",
          "minimum": 0,
          "examples": [
            1,
            2
          ]
        },
        "minor": {
          "type": "integer",
          "description": "The minor version of the list. Must be incremented when smart contracts are added to the set.",
          "minimum": 0,
          "examples": [
            0,
            1
          ]
        },
        "patch": {
          "type": "integer",
          "description": "The patch version of the list. Must be incremented for any changes to the list.",
          "minimum": 0,
          "examples": [
            0,
            1
          ]
        }
      },
      "required": [
        "major",
        "minor",
        "patch"
      ]
    }
  }
}